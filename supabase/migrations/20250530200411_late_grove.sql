-- Enable RLS
alter table public.empresas enable row level security;
alter table public.usuarios enable row level security;
alter table public.agendamentos enable row level security;
alter table public.atendimentos enable row level security;
alter table public.pagamentos enable row level security;
alter table public.configuracoes enable row level security;
alter table public.notificacoes enable row level security;

-- Create tables
create table public.empresas (
    id uuid default uuid_generate_v4() primary key,
    nome text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.usuarios (
    id uuid references auth.users on delete cascade not null primary key,
    email text not null unique,
    empresa_id uuid references public.empresas on delete cascade not null,
    needs_password_change boolean default true,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.agendamentos (
    id bigint generated by default as identity primary key,
    empresa_id uuid references public.empresas on delete cascade not null,
    cliente text not null,
    servico text not null,
    valor numeric(10,2) not null,
    data date not null,
    hora time not null,
    status text not null,
    observacoes text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.atendimentos (
    id bigint generated by default as identity primary key,
    empresa_id uuid references public.empresas on delete cascade not null,
    cliente text not null,
    canal text not null,
    tipo text not null,
    status text not null,
    detalhes_conversa text not null,
    criado_em timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.pagamentos (
    id bigint generated by default as identity primary key,
    empresa_id uuid references public.empresas on delete cascade not null,
    cliente text not null,
    valor numeric(10,2) not null,
    status text not null,
    data date not null,
    metodo text not null,
    servico text not null
);

create table public.configuracoes (
    id bigint generated by default as identity primary key,
    empresa_id uuid references public.empresas on delete cascade not null unique,
    nome_empresa text not null,
    servicos jsonb not null default '[]'::jsonb,
    horarios jsonb not null default '{}'::jsonb,
    link_pagamento text not null default '',
    tom_voz text not null default ''
);

create table public.notificacoes (
    id bigint generated by default as identity primary key,
    empresa_id uuid references public.empresas on delete cascade not null,
    tipo text not null,
    mensagem text not null,
    lido boolean default false,
    criado_em timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create RLS policies
create policy "Users can view their own empresa"
    on empresas for select
    using (id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can view their own data"
    on usuarios for select
    using (id = auth.uid());

create policy "Users can update their own data"
    on usuarios for update
    using (id = auth.uid());

create policy "Users can view their empresa's agendamentos"
    on agendamentos for select
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can insert their empresa's agendamentos"
    on agendamentos for insert
    with check (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can update their empresa's agendamentos"
    on agendamentos for update
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can view their empresa's atendimentos"
    on atendimentos for select
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can insert their empresa's atendimentos"
    on atendimentos for insert
    with check (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can update their empresa's atendimentos"
    on atendimentos for update
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can view their empresa's pagamentos"
    on pagamentos for select
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can view their empresa's configuracoes"
    on configuracoes for select
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can update their empresa's configuracoes"
    on configuracoes for update
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

create policy "Users can view their empresa's notificacoes"
    on notificacoes for select
    using (empresa_id in (
        select empresa_id from usuarios
        where usuarios.id = auth.uid()
    ));

-- Create test data
insert into public.empresas (id, nome)
values ('550e8400-e29b-41d4-a716-446655440000', 'Empresa Demo');

-- Create test user (password will be set through Auth UI)
insert into public.usuarios (id, email, empresa_id, needs_password_change)
values ('auth_user_id', 'teste@comandai.com', '550e8400-e29b-41d4-a716-446655440000', true);

-- Create initial configuracoes
insert into public.configuracoes (empresa_id, nome_empresa, servicos, horarios)
values (
    '550e8400-e29b-41d4-a716-446655440000',
    'Empresa Demo',
    '[
        {"nome": "Consultoria Marketing", "valor": 350.00},
        {"nome": "Desenvolvimento Site", "valor": 1200.00},
        {"nome": "Social Media", "valor": 800.00}
    ]'::jsonb,
    '{
        "segunda": {"inicio": "08:00", "fim": "18:00", "ativo": true},
        "terca": {"inicio": "08:00", "fim": "18:00", "ativo": true},
        "quarta": {"inicio": "08:00", "fim": "18:00", "ativo": true},
        "quinta": {"inicio": "08:00", "fim": "18:00", "ativo": true},
        "sexta": {"inicio": "08:00", "fim": "18:00", "ativo": true},
        "sabado": {"inicio": "08:00", "fim": "12:00", "ativo": false},
        "domingo": {"inicio": "08:00", "fim": "12:00", "ativo": false}
    }'::jsonb
);